module alu_tb;

    logic [31:0] a, b;
    logic [3:0] alu_op;
    logic [31:0] result;
    logic N, Z, C, V;

    // Instancia de la ALU
    alu uut (
        .a(a),
        .b(b),
        .alu_op(alu_op),
        .result(result),
        .N(N),
        .Z(Z),
        .C(C),
        .V(V)
    );

    initial begin
        // Test de suma
        a = 32'd10; b = 32'd20; alu_op = 4'b0000;
        #10;
        $display("Suma: %d + %d = %d", a, b, result);

        // Test de resta
        a = 32'd30; b = 32'd20; alu_op = 4'b0001;
        #10;
        $display("Resta: %d - %d = %d", a, b, result);

        // Test de multiplicaci贸n
        a = 32'd5; b = 32'd4; alu_op = 4'b0010;
        #10;
        $display("Multiplicaci贸n: %d * %d = %d", a, b, result);

        // Test de AND
        a = 32'hFF00FF00; b = 32'h00FF00FF; alu_op = 4'b0011;
        #10;
        $display("AND: %h & %h = %h", a, b, result);

        // Test de OR
        a = 32'hFF00FF00; b = 32'h00FF00FF; alu_op = 4'b0100;
        #10;
        $display("OR: %h | %h = %h", a, b, result);

        // Test de XOR
        a = 32'hFF00FF00; b = 32'h00FF00FF; alu_op = 4'b0101;
        #10;
        $display("XOR: %h ^ %h = %h", a, b, result);

        // Test de Shift Left
        a = 32'h00000001; b = 32'd4; alu_op = 4'b0110;
        #10;
        $display("Shift Left: %h << %d = %h", a, b, result);

        // Test de Shift Right
        a = 32'h00000010; b = 32'd4; alu_op = 4'b0111;
        #10;
        $display("Shift Right: %h >> %d = %h", a, b, result);

        // Test de M贸dulo
        a = 32'd25; b = 32'd7; alu_op = 4'b1000;
        #10;
        $display("M贸dulo: %d %% %d = %d", a, b, result);

        $stop;
    end

endmodule
